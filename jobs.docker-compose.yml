services:
  prefect-server:
    image: prefecthq/prefect:2-python3.11
    container_name: prefect-server
    restart: always
    profiles:
      - development
      - production
    volumes:
      - prefect-volume:/root/.prefect
    entrypoint:
      [
        "/opt/prefect/entrypoint.sh",
        "prefect",
        "server",
        "start"
      ]
    healthcheck:
      test: [ "CMD", "prefect", "version" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
    environment:
      - PREFECT_API_DATABASE_ECHO=False
      - PREFECT_API_DATABASE_MIGRATE_ON_START=True
      - PREFECT_UI_SERVE_BASE=/prefect-ui
      - PREFECT_TASK_DEFAULT_RETRIES=2
      - PREFECT_TASK_DEFAULT_RETRY_DELAY_SECONDS=[1,10,100]
      # working; PREFECT has some issues with api prefixes...
      - PREFECT_UI_URL=http://prefect-server:4200/api
      - PREFECT_API_URL=http://prefect-server:4200/api

      - PREFECT_SERVER_API_HOST=0.0.0.0
      - PREFECT_API_DATABASE_CONNECTION_URL=postgresql+asyncpg://postgres_user:postgres_pw@postgres:5432/prefect
    ports:
      - 4200:4200
    depends_on:
      - postgres
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.prefect-server.loadbalancer.server.port=4200"
      # UI
      - "traefik.http.routers.prefect-server.rule=Host(`${HOST}`) && PathPrefix(`/prefect-ui`)"
      - "traefik.http.routers.prefect-server.entrypoints=web"
      # API: TODO: this is workaround; prefect cannot serve the api behind a prefix so this is on root
      - "traefik.http.routers.prefect-api-server.rule=Host(`${HOST}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.prefect-api-server.entrypoints=web"

      - "traefik.http.routers.prefect-api-strip-server.rule=Host(`  ${HOST}`) && PathPrefix(`/perfect`)"
      - "traefik.http.middlewares.prefect-api-strip-server.stripprefix.prefixes=/perfect`"
      - "traefik.http.routers.prefect-api-strip-server.entrypoints=web"
      - "traefik.http.routers.prefect-server.middlewares=prefect-api-strip-server"
    networks:
      - scopemarchiver_network
  prefect-config:
    image: ${PREFECT_CONFIG_IMAGE_NAME}:${OPENEM_IMAGE_TAG}
    container_name: prefect-config
    profiles:
      - production
      - development
    build:
      context: ./backend/
      dockerfile: ./prefect-config.Dockerfile
    networks:
      - scopemarchiver_network
    environment:
      - PREFECT_LOGGING_LEVEL=DEBUG
      - PREFECT_API_URL=http://prefect-server:4200/api
    volumes:
      - type: bind
        source: ./backend/config.toml
        target: /var/local/config.toml
    command: "/var/local/config.toml"
    depends_on:
      prefect-server:
        condition: service_healthy
  prefect-archival-worker:
    image: prefecthq/prefect:2-python3.11
    profiles:
      - production
    restart: always
    deploy:
      mode: replicated
      replicas: 2
    command:
      [
        "prefect",
        "worker",
        "start",
        "--pool",
        "${PREFECT_ARCHIVAL_WORKPOOL_NAME}",
        "--type",
        "docker",
        "--install-policy",
        "if-not-present",
        "--base-job-template",
        "/var/local/prefect-jobtemplate.json"
      ]
    # ports:
    #   - "8081:8081" # if you want healthchecks, otherwise not necessary
    networks:
      - scopemarchiver_network
    volumes:
      - ./${PREFECT_JOB_TEMPLATE}:/var/local/prefect-jobtemplate.json
      - /usr/bin/docker:/usr/bin/docker
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      # Fixes bug in docker/requests package
      - EXTRA_PIP_PACKAGES=requests==2.31.0
      - PREFECT_LOGGING_LEVEL=DEBUG
      - PREFECT_API_URL=http://prefect-server:4200/api
  prefect-retrieval-worker:
    image: prefecthq/prefect:2-python3.11
    profiles:
      - production
    restart: always
    deploy:
      mode: replicated
      replicas: 2
    command:
      [
        "prefect",
        "worker",
        "start",
        "--pool",
        "${PREFECT_RETRIEVAL_WORKPOOL_NAME}",
        "--type",
        "docker",
        "--install-policy",
        "if-not-present",
        "--base-job-template",
        "/var/local/prefect-jobtemplate.json"
      ]
    # ports:
    #   - "8081:8081" # if you want healthchecks, otherwise not necessary
    networks:
      - scopemarchiver_network
    volumes:
      - ./${PREFECT_JOB_TEMPLATE}:/var/local/prefect-jobtemplate.json
      - /usr/bin/docker:/usr/bin/docker
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      # Fixes bug in docker/requests package
      - EXTRA_PIP_PACKAGES=requests==2.31.0
      - PREFECT_LOGGING_LEVEL=DEBUG
      - PREFECT_API_URL=http://prefect-server:4200/api
  # start this container to create the volumes that can be used by the jobs
  scopemarchiver-runtime:
    image: ${PREFECT_RUNTIME_IMAGE_NAME}:${OPENEM_IMAGE_TAG}
    container_name: scopemarchiver-runtime
    build:
      context: ./backend/
      dockerfile: ./prefect-runtime.Dockerfile
    command: ls -l /tmp/LTS
    volumes:
      - ${PREFECT_WORKER_LTS_VOLUME_NAME}:/tmp/LTS
  postgres:
    image: postgres:15.2-alpine
    restart: always
    profiles:
      - development
      - production
    environment:
      - POSTGRES_USER=postgres_user
      - POSTGRES_PASSWORD=postgres_pw
      - POSTGRES_DB=prefect
    expose:
      - 5432
    volumes:
      - postgres-volume:/var/lib/postgresql/data
    networks:
      - scopemarchiver_network
  scicatmock:
    image: ${SCICAT_MOCK_IMAGE_NAME}:${OPENEM_IMAGE_TAG}
    container_name: scicatmock
    profiles:
      - development
      - production
    build:
      context: ./backend
      dockerfile: ./scicatmock.Dockerfile
    ports:
      - 8005:8000
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.scicatmock.rule=Host(`${HOST}`) && PathPrefix(`/scicatmock`)"
      - "traefik.http.middlewares.scicatmock-stripprefix.stripprefix.prefixes=/scicatmock`"
      - "traefik.http.routers.scicatmock.entrypoints=web"
      - "traefik.http.routers.scicatmock.middlewares=scicatmock-stripprefix"
      - "traefik.http.services.scicatmock.loadbalancer.server.port=8000"
    networks:
      - scopemarchiver_network
volumes:
  lts-mock-volume:
    driver: local
  postgres-volume:
    driver: local
  prefect-volume:
    driver: local
  nfs-lts-share:
    driver_opts:
      type: "nfs"
      o: "nfsvers=3,addr=lts22,nolock"
      device: ":/scopem_lts_nfs_test_lts22"
