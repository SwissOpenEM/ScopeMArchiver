stages:          # List of stages for jobs, and their order of execution
  - build
  - publish
  - deploy

variables:
  ARCHIVE_NAME: emuploader-${CI_COMMIT_BRANCH}-${CI_COMMIT_REF_SLUG}.tar.gz 

publish_docker_compose:
  stage: publish 
  before_script:
    - mkdir ./build
    - cp docker-compose.yml ./build/
    - cp .env ./build/
  script:
    - tar cvzf ${ARCHIVE_NAME} ./build
    - |
      curl --user "${CI_DEPLOY_USER}:${CI_DEPLOY_PASSWORD}" --upload-file ${ARCHIVE_NAME} "https://sissource.ethz.ch/api/v4/projects/${CI_PROJECT_ID}/packages/generic/emuploader/0.0.1/${ARCHIVE_NAME}"
  rules:
    - changes:
      - docker-compose.yml
      - prometheus.yml
      - .env

build_mockarchiver:
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/docker:24.0.2
  stage: build
  tags: [docker-executor]
  services:
    - name: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/docker:24.0.2-dind
      alias: docker
      variables:
        DOCKER_TLS_CERTDIR: ''
  variables:
    DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE/mockarchiver:$CI_COMMIT_REF_SLUG
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY

  # All branches are tagged with $DOCKER_IMAGE_NAME (defaults to commit ref slug)
  # Default branch is also tagged with `latest`
  script:
    - cd ./mockarchiver
    - docker build --pull -t "$DOCKER_IMAGE_NAME" .
    - docker push "$DOCKER_IMAGE_NAME"
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        docker tag "$DOCKER_IMAGE_NAME" "$CI_REGISTRY_IMAGE/mockarchiver:latest"
        docker push "$CI_REGISTRY_IMAGE/mockarchiver:latest"
      fi
  rules:
    - changes:
      - mockarchiver/*
      - docker-compose-development.yml
      - .development.env



deploy-dev:
  image: ubuntu
  stage: deploy

  variables:
    SSH_USER: operator
    SSH_HOST: openem-dev.ethz.ch

  only: 
    - web

  before_script:
    ##
    ## Install ssh-agent if not already installed, it is required by Docker.
    ## (change apt-get to yum if you use an RPM-based image)
    ##
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'

    ##
    ## Run ssh-agent (inside the build environment)
    ##
    - eval $(ssh-agent -s)

    ##
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work
    ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    ##
    - cat "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -

    ##
    ## Create the SSH directory and give it the right permissions
    ##
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    ##
    ## Use ssh-keyscan to scan the keys of your private server. Replace gitlab.com
    ## with your own domain name. You can copy and repeat that command if you have
    ## more than one server to connect to.
    ##
    - ssh-keyscan $SSH_HOST  >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

    ##
    ## Alternatively, assuming you created the SSH_SERVER_HOSTKEYS variable
    ## previously, uncomment the following two lines instead.
    ##
    #- echo "$SSH_SERVER_HOSTKEYS" > ~/.ssh/known_hosts
    #- chmod 644 ~/.ssh/known_hosts

    ##
    ## You can optionally disable host key checking. Be aware that by adding that
    ## you are suspectible to man-in-the-middle attacks.
    ## WARNING: Use this only with the Docker executor, if you use it with shell
    ## you will overwrite your user's SSH config.
    ##
    #- '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    # - ssh $SSH_USER@$SSH_HOST "cd $WORK_DIR && docker compose pull && docker compose up -d && exit"
    - ssh $SSH_USER@$SSH_HOST "pwd && exit"
    - ssh $SSH_USER@$SSH_HOST "cd gitlab && docker compose down && exit"
    - |
      ssh $SSH_USER@$SSH_HOST "cd gitlab && wget -N --user ${CI_DEPLOY_USER} --password ${CI_DEPLOY_PASSWORD} https://sissource.ethz.ch/api/v4/projects/${CI_PROJECT_ID}/packages/generic/emuploader/0.0.1/${ARCHIVE_NAME} && tar -xvzf ${ARCHIVE_NAME} && docker compose -f ./build/docker-compose.yml up -d && exit"

  after_script:
    - rm -rf ~/.ssh
