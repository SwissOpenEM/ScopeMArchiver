# coding: utf-8

"""
    ETHZ Archiver Service

    REST API endpoint provider for presigned S3 upload and archiving workflow scheduling

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CreateServiceTokenResp(BaseModel):
    """
    CreateServiceTokenResp
    """ # noqa: E501
    access_token: StrictStr = Field(description="The JWT access token")
    expires_in: Optional[StrictInt] = Field(default=None, description="The duration in seconds the access token is valid for")
    refresh_token: StrictStr = Field(description="The JWT refresh token")
    refresh_expires_in: Optional[StrictInt] = Field(default=None, description="The duration in seconds the refresh token is valid for")
    token_type: Optional[StrictStr] = Field(default=None, description="Bearer")
    not_before_policy: Optional[StrictInt] = Field(default=None, description="Timestamp that indicates the time before which the JWT must not be accepted for processing", alias="not-before-policy")
    session_state: Optional[StrictStr] = Field(default=None, description="Session id, identifier that uniquely ties the session to the authenticated user")
    scope: Optional[StrictStr] = Field(default=None, description="Claim in a JWT defines the set of permissions or access rights granted")
    __properties: ClassVar[List[str]] = ["access_token", "expires_in", "refresh_token", "refresh_expires_in", "token_type", "not-before-policy", "session_state", "scope"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CreateServiceTokenResp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CreateServiceTokenResp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "access_token": obj.get("access_token"),
            "expires_in": obj.get("expires_in"),
            "refresh_token": obj.get("refresh_token"),
            "refresh_expires_in": obj.get("refresh_expires_in"),
            "token_type": obj.get("token_type"),
            "not-before-policy": obj.get("not-before-policy"),
            "session_state": obj.get("session_state"),
            "scope": obj.get("scope")
        })
        return _obj


